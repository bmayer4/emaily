const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const keys = require('../config/keys');
const mongoose = require('mongoose');

const User = mongoose.model('User');

passport.serializeUser((user, done) => {
    done(null, user.id);  //not googleId, actual id of user generated by mongo
});                       //id here is made into a session

passport.deserializeUser((id, done) => {  //first arg is token we had prev stuffed into the cookie
    User.findById(id).then((user) => {
        if (user) {
            done(null, user);  
        }
    })
});


passport.use(new GoogleStrategy({
    clientID: keys.googleClientID,
    clientSecret: keys.googleClientSecret,
    callbackURL: '/auth/google/callback',
    proxy: true    //if our request runs through any proxy, use https
}, (accessToken, refreshToken, profile, done) => {  //done is a calback we have to call after we've done some work of nudging passport along
    console.log('Profile: ', profile.id);
    User.findOne({googleId: profile.id}).then((user) => {  //the user we return here is what is passed to serialize user
        if (user) {
            //we already have a record for this profile id
            done(null, user);  //first is error
        } else {
            //no record with this id, we want to create a new user
            new User({googleId: profile.id}).save().then((user) => {
                done(null, user);
            });
        }
    })
}));


//*** OAuths purpose is to allow use to sign in. After that, we use our own internal ID's